{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "This template creates demo VPC for WDS project.",

  "Parameters" : {

    "VPNInstanceType" : {
      "Description" : "VPN Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "ChefInstanceType" : {
      "Description" : "Chef Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyNameMGMT": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the Chef and VPN instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "VPCCIDR" : {
      "Description" : "CIDR block for VPC",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.0.0/20",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DMZSubnetCIDR" : {
      "Description" : "CIDR block for DMZ subnet",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.1.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "AppSubnetACIDR" : {
      "Description" : "CIDR block for App Servers subnet in AZ A",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.2.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "AppSubnetBCIDR" : {
      "Description" : "CIDR block for App Servers subnet in AZ B",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.3.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DBSubnetACIDR" : {
      "Description" : "CIDR block for DB Servers subnet in AZ A",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.4.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DBSubnetBCIDR" : {
      "Description" : "CIDR block for DB Servers subnet in AZ B",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.5.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "MGMTSubnetCIDR" : {
      "Description" : "CIDR block for Management Servers subnet",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.6.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DMZSubnetNetwork" : {
      "Description" : "Network and netmask for DMZ subnet",
      "Type": "String",
      "Default": "10.225.1.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP network/mask of the form x.x.x.x x.x.x.x."
    },

    "AppSubnetANetwork" : {
      "Description" : "Network and netmask for App subnet",
      "Type": "String",
      "Default": "10.225.2.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP network/mask of the form x.x.x.x x.x.x.x."
    },

    "AppSubnetBNetwork" : {
      "Description" : "Network and netmask for App subnet",
      "Type": "String",
      "Default": "10.225.3.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP network/mask of the form x.x.x.x x.x.x.x."
    },

    "DBSubnetANetwork" : {
      "Description" : "Network and netmask for DB subnet",
      "Type": "String",
      "Default": "10.225.4.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP network/mask of the form x.x.x.x x.x.x.x."
    },

    "DBSubnetBNetwork" : {
      "Description" : "Network and netmask for DB subnet",
      "Type": "String",
      "Default": "10.225.5.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP network/mask of the form x.x.x.x x.x.x.x."
    },

    "MGMTSubnetNetwork" : {
      "Description" : "Network and netmask for MGMT subnet",
      "Type": "String",
      "Default": "10.225.6.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP network/mask of the form x.x.x.x x.x.x.x."
    },

    "VPNSubnetCIDR" : {
      "Description" : "CIDR block for App Servers subnet",
      "Type": "String",
      "Default": "10.226.0.0/24",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x x.x.x.x."
    },

    "VPNSubnetNetwork" : {
      "Description" : "CIDR block for App Servers subnet",
      "Type": "String",
      "Default": "10.226.0.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x x.x.x.x."
    },

    "NameTag" : {
      "Default" : "wds-demo",
      "Type" : "String",
      "Description" : "Name tag for resources"
    },

    "SecretsBucketName" : {
      "Default" : "wds-demo-secret",
      "Type" : "String",
      "Description" : "S3 bucket with secrets used in this template"
    },

    "InstallationsBucketName" : {
      "Default" : "wds-demo-install",
      "Type" : "String",
      "Description" : "S3 bucket with installation files used in this template"
    },

    "BookshelfBucketName" : {
      "Default" : "wds-demo-bookshelf",
      "Type" : "String",
      "Description" : "S3 bucket with bookshelf for chef server used in this template"
    },

    "SecretsVPNFolder" : {
      "Default" : "vpngw",
      "Type" : "String",
      "Description" : "Folder name containing VPN GW secrets. Policy granting read permission will be created and assigned to VPN GW EC2 instance"
    },

    "SecretsChefFolder" : {
      "Default" : "chef",
      "Type" : "String",
      "Description" : "Folder name containing Chef server secrets. Policy granting read permission will be created and assigned to Chef server EC2 instance"
    },

    "DNSZoneName" : {
      "Default" : "wdsdev.net",
      "Type" : "String",
      "Description" : "DNS Zone name to create hostnames in"
    },

    "AZa" : {
      "Type" : "String", 
      "Default" : "eu-west-1a",
      "Description" : "Availability zone to create availability zone A subnets"
    },

    "AZb" : {
      "Type" : "String", 
      "Default" : "eu-west-1b",
      "Description" : "Availability zone to create availability zone B subnet"
    }

  },

  "Resources" : {

    "RolePoliciesTags": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "_tags_policy" ] ] },
        "PolicyDocument": {
           "Version" : "2012-10-17",
           "Statement": [ {
              "Effect": "Allow",
              "Action": [
                     "ec2:Describe*",
                     "ec2:CreateTags"
                 ],
              "Resource": "*"
           }]
        },
        "Roles": [ {"Ref": "IAMVPNRole"}, {"Ref": "IAMChefRole"} ]
      }
    },

    "IAMVPNRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
           "Version" : "2012-10-17",
           "Statement": [ {
              "Effect": "Allow",
              "Principal": {
                 "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
           } ]
        },
        "Policies": [ {
           "PolicyName": { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "vpn-secrets-s3" ] ] },
           "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement":[{
                "Effect": "Allow",
                "Action": [
                       "s3:Get*",
                       "s3:List*",
                       "s3:Put*"
                     ],
                "Resource": [
                              { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "SecretsBucketName" }, "/", { "Ref" : "SecretsVPNFolder" } , "/" ] ] },
                              { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "SecretsBucketName" }, "/", { "Ref" : "SecretsVPNFolder" } , "/*" ] ] }
                  ]
               }
             ]
           }
         }]
       }
    },

    "IAMVPNInstanceProfile" : {
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": { "Fn::Join" : [ "", [ "/", { "Ref" : "NameTag" }, "/InstanceProfile/" ] ] },
          "Roles": [ { "Ref" : "IAMVPNRole" } ]
       }
    },

    "IAMChefRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
           "Version" : "2012-10-17",
           "Statement": [ {
              "Effect": "Allow",
              "Principal": {
                 "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
           } ]
        },
        "Policies": [ {
           "PolicyName": { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "chef-secrets-s3" ] ] },
           "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement":[{
                "Effect": "Allow",
                "Action": [
                       "s3:Get*",
                       "s3:List*",
                       "s3:PutObject"
                     ],
                "Resource": [
                              { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "SecretsBucketName" }, "/", { "Ref" : "SecretsChefFolder" } , "/" ] ] },
                              { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "SecretsBucketName" }, "/", { "Ref" : "SecretsChefFolder" } , "/*" ] ] }
                  ]
               }
             ]
           }
         }]
       }
    },

    "IAMChefInstanceProfile" : {
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": { "Fn::Join" : [ "", [ "/", { "Ref" : "NameTag" }, "/InstanceProfile/" ] ] },
          "Roles": [ { "Ref" : "IAMChefRole" } ]
       }
    },

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "VPCCIDR" },
        "Tags" : [  {"Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-vpc" ] ] } }
                 ]
      }
    },

    "VPCDhcpOptions" : {
      "Type" : "AWS::EC2::DHCPOptions",
      "Properties" : {
        "DomainName" : { "Ref" : "DNSZoneName" },
        "DomainNameServers" : [ "AmazonProvidedDNS" ],
        "Tags" : [  {"Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-dhcp-opts" ] ] } }
                 ]
      }
    },

    "VPCDhcpOptionsAssociation" : { 
      "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties" : {
        "DhcpOptionsId" : { "Ref" : "VPCDhcpOptions" },
        "VpcId" : { "Ref" : "VPC" }
      }
    },

    "DMZSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "DMZSubnetCIDR" },
        "AvailabilityZone" : { "Ref" : "AZa" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-DMZ" ] ] } }
                 ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-inetgw" ] ] } }
                 ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTableDMZ" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-routetable-dmz" ] ] } }
                 ]
      }
    },

    "DefaultRouteDMZ" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableDMZ" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "DMZSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DMZSubnet" },
        "RouteTableId" : { "Ref" : "RouteTableDMZ" }
      }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} } ]
      }
    },

    "InboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "InboundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },

    "InboundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "104",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "OutBoundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },

    "OutBoundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },

    "OutBoundVPNNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1194", "To" : "1194"}
      }
    },

    "OutBoundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "104",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DMZSubnet" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "AppSubnetA" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "AppSubnetACIDR" },
        "AvailabilityZone" : { "Ref" : "AZa" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-APP" ] ] } }
                 ]
      }
    },

    "AppSubnetB" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "AppSubnetBCIDR" },
        "AvailabilityZone" : { "Ref" : "AZb" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-APP" ] ] } }
                 ]
      }
    },

    "DBSubnetA" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "DBSubnetACIDR" },
        "AvailabilityZone" : { "Ref" : "AZa" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-DB" ] ] } }
                 ]
      }
    },

    "DBSubnetB" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "DBSubnetBCIDR" },
        "AvailabilityZone" : { "Ref" : "AZb" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-DB" ] ] } }
                 ]
      }
    },

    "MGMTSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "MGMTSubnetCIDR" },
        "AvailabilityZone" : { "Ref" : "AZa" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-MGMT" ] ] } }
                 ]
      }
    },

    "RouteTableApp" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-routetable-app" ] ] } }
                 ]
      }
    },

    "VPNClientsRouteApp" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "VPNGatewayInstance",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableApp" },
        "DestinationCidrBlock" : { "Ref": "VPNSubnetCIDR" },
        "InstanceId" : { "Ref" : "VPNGatewayInstance" }
      }
    },

    "DefaultRouteApp" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "InternetGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableApp" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "VPNGatewayInstance" }
      }
    },

    "AppSubnetARouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "AppSubnetA" },
        "RouteTableId" : { "Ref" : "RouteTableApp" }
      }
    },

    "AppSubnetBRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "AppSubnetB" },
        "RouteTableId" : { "Ref" : "RouteTableApp" }
      }
    },

    "DBSubnetARouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DBSubnetA" },
        "RouteTableId" : { "Ref" : "RouteTableApp" }
      }
    },

    "DBSubnetBRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DBSubnetB" },
        "RouteTableId" : { "Ref" : "RouteTableApp" }
      }
    },

    "VPNInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22 and VPN via 1194",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation" }},
          { "IpProtocol" : "tcp", "FromPort" : "1194", "ToPort" : "1194", "CidrIp" : { "Ref" : "SSHLocation" }},
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "AppSubnetACIDR" }},
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "AppSubnetACIDR" }},
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "AppSubnetBCIDR" }},
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "AppSubnetBCIDR" }}
         ]
      }
    },

   "VPNGatewayInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "AttachGateway",
      "Metadata" : {
        "AWS::CloudFormation::Authentication": {
            "S3AccessCreds" : {
                "type": "s3",
                "buckets": [ { "Ref": "SecretsBucketName" } ],
                "roleName": { "Ref": "IAMVPNRole" }
            }
        },
        "Comment" : "Setup OpenVPN",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "vim"             : [],
                "openvpn"         : [],
                "unzip"           : [],
                "python-pip"      : [],
                "libwww-perl"     : [],
                "libswitch-perl"  : [],
                "ntp"             : [],
                "libdatetime-perl": [],
                "awscli"          : []
              }
            },
            "files" : {
              "/etc/openvpn/keys/wds-demo-CA.crt" : {
                "authentication" : "S3AccessCreds",
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root",
                "source"  :  { "Fn::Join" : [ "", [ "https://s3-eu-west-1.amazonaws.com/", { "Ref" : "SecretsBucketName" }, "/vpngw/wds-demo-CA.crt" ] ] }
              },

              "/etc/openvpn/keys/vpn-server.crt" : {
                "authentication" : "S3AccessCreds",
                "mode"    : "000400",
               "owner"   : "root",
                "group"   : "root",
                "source"  :  { "Fn::Join" : [ "", [ "https://s3-eu-west-1.amazonaws.com/", { "Ref" : "SecretsBucketName" }, "/vpngw/vpn-server.crt" ] ] }
              },

              "/etc/openvpn/keys/vpn-server.pem" : {
                "authentication" : "S3AccessCreds",
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root",
                "source"  :  { "Fn::Join" : [ "", [ "https://s3-eu-west-1.amazonaws.com/", { "Ref" : "SecretsBucketName" }, "/vpngw/vpn-server.pem" ] ] }
              },

              "/etc/openvpn/keys/crl.pem" : {
                "authentication" : "S3AccessCreds",
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root",
                "source"  :  { "Fn::Join" : [ "", [ "https://s3-us-west-1.amazonaws.com/", { "Ref" : "SecretsBucketName" }, "/vpngw/crl.pem" ] ] }
              },

              "/etc/openvpn/keys/2048.pem" : {
                "authentication" : "S3AccessCreds",
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root",
                "source"  :  { "Fn::Join" : [ "", [ "https://s3-eu-west-1.amazonaws.com/", { "Ref" : "SecretsBucketName" }, "/vpngw/dh2048.pem" ] ] }
              },

              "/etc/openvpn/server.conf" : {
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root",
                "content" : { "Fn::Join" : ["", [
                  "port 1194", "\n",
                  "proto tcp", "\n",
                  "dev tun", "\n",
                  "ca ./keys/wds-demo-CA.crt", "\n",
                  "cert ./keys/vpn-server.crt", "\n",
                  "key ./keys/vpn-server.pem  # This file should be kept secret", "\n",
                  "crl-verify ./keys/crl.pem", "\n",
                  "dh ./keys/2048.pem", "\n",
                  "server ", { "Ref" : "VPNSubnetNetwork" }, "\n",
                  "ifconfig-pool-persist ipp.txt", "\n",
                  "push \"route ", { "Ref": "DMZSubnetNetwork" }, "\"", "\n",
                  "push \"route ", { "Ref": "AppSubnetANetwork" }, "\"", "\n",
                  "push \"route ", { "Ref": "AppSubnetBNetwork" }, "\"", "\n",
                  "push \"route ", { "Ref": "DBSubnetANetwork" }, "\"", "\n",
                  "push \"route ", { "Ref": "DBSubnetBNetwork" }, "\"", "\n",
                  "push \"route ", { "Ref": "MGMTSubnetNetwork" }, "\"", "\n",
                  "keepalive 10 120", "\n",
                  "comp-lzo", "\n",
                  "user nobody", "\n",
                  "group nogroup", "\n",
                  "persist-key", "\n",
                  "persist-tun", "\n",
                  "status openvpn-status.log", "\n",
                  "log openvpn.log", "\n",
                  "verb 0", "\n"
                ]]}
              }
            },

            "sources" : {
              "/usr/local/etc" : "http://ec2-downloads.s3.amazonaws.com/cloudwatch-samples/CloudWatchMonitoringScripts-v1.1.0.zip"
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : "ami-f95ef58a",
        "InstanceType" : { "Ref" : "VPNInstanceType" },
        "Monitoring" : "false",
        "KeyName" : { "Ref" : "KeyNameMGMT" },
        "IamInstanceProfile" : { "Ref" : "IAMVPNInstanceProfile" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-vpnserver" ] ] } }
                 ],
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "VPNInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "DMZSubnet" }
        }],
        "SourceDestCheck" : "false",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -xe\n",

            "function error_exit\n",
            "{\n",
           "  cfn-signal -e 1 -r \"$1\" '", {"Ref" : "VPNWaitHandle"}, "'\n",
            "  exit 1\n",
            "}\n",

            "echo 'demo-vpn.wdsdev.net' > /etc/hostname\n",
            "hostname demo-vpn.wdsdev.net\n",
            "apt-get update\n",
            "apt-get -y install python-setuptools python-pip python-dev libffi-dev libssl-dev\n",
            "apt-get -y install libpam-google-authenticator\n",
            "pip install requests[security]\n",
            "pip install --upgrade ndg-httpsclient\n",
            "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
            "cfn-init --region ", { "Ref" : "AWS::Region" },
            "    -s ", { "Ref" : "AWS::StackId" }, " -r VPNGatewayInstance ", "|| error_exit 'vpncfn-init failed'\n",
            "service openvpn start || error_exit 'service openvpn failed to start'\n",
            "#setup NAT masquerading\n",
            "sed -i -e 's/DEFAULT_FORWARD_POLICY=\"DROP\"/DEFAULT_FORWARD_POLICY=\"ACCEPT\"/' /etc/default/ufw\n",
            "sed -i -e \"s%#net/ipv4/ip_forward=1%net/ipv4/ip_forward=1%\" /etc/ufw/sysctl.conf\n",
            "sysctl -p /etc/ufw/sysctl.conf\n",
  "if grep \"NAT settings\" /etc/ufw/before.rules; then echo \"NAT Setting are already there, will not modify (modification not supported)\"; else sed -i -e \"s%# Don't delete these required lines, otherwise there will be errors%# NAT settings\\n*nat\\n:POSTROUTING ACCEPT [0:0]\\n# NAT traffic from VPC\\n-A POSTROUTING -s 10.226.1.0/24 -d 10.225.1.0/24 -j ACCEPT\\n-A POSTROUTING -s 10.226.1.0/24 -d 10.225.2.0/24 -j ACCEPT\\n-A POSTROUTING -s 10.225.1.0/24 -d 10.226.1.0/24 -j ACCEPT\\n-A POSTROUTING -s 10.225.2.0/24 -d 10.226.1.0/24 -j ACCEPT\\n-A POSTROUTING -s 10.225.0.0/16 -o eth0 -j MASQUERADE\\nCOMMIT\\n\\n# Don't delete these required lines, otherwise there will be errors\\n%\" /etc/ufw/before.rules; fi\n",
            "ufw allow ssh; ufw allow 1194; echo y | ufw enable || error_exit 'service ufw failed to start'\n",
            "# tag volume\n",
            "Region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep -oP \"(?<=\\\"region\\\" : \\\")[^\\\"]+\")\n",
            "aws ec2 create-tags --resources $(aws ec2 describe-instances --instance-ids $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --region $Region | grep -oP \"(?<=\\\"VolumeId\\\": \\\")[^\\\"]+\") --tags Key=Environment,Value=",{"Ref" : "AWS::StackName"}," --region $Region\n",
            "cfn-signal -e $? -r \"firewall setup complete\" '", {"Ref" : "VPNWaitHandle"}, "'\n"
        ]]}}
      }
    },

    "VPNWaitHandle" : {
        "Type" : "AWS::CloudFormation::WaitConditionHandle",
        "Properties" : {
        }
    },

    "VPNWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "VPNGatewayInstance",
      "Properties" : {
        "Handle" : {"Ref" : "VPNWaitHandle"},
        "Timeout" : "900"
      }
    },

    "VPNGatewayInstanceDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "DependsOn" : "VPNGatewayInstance",
      "Properties" : {
        "HostedZoneName" : {
          "Fn::Join" : [ "", [
            { "Ref" : "DNSZoneName" }, "."
          ] ]
        },
        "Comment" : "DNS name for VPN Gatevay instance.",
        "Name" : {
         "Fn::Join" : [ "", [
          "demo-vpn.",
          {"Ref" : "DNSZoneName"}, "."
         ] ]
        },
        "Type" : "A",
        "TTL" : "60",
        "ResourceRecords" : [
          { "Fn::GetAtt" : [ "VPNGatewayInstance", "PrivateIp" ] }
        ]
      }
    },

    "ChefServerInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22 and chef server api access via port 443",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "VPNSubnetCIDR"}},
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "AppSubnetACIDR"}},
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "AppSubnetBCIDR"}},
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "DBSubnetACIDR"}},
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "DBSubnetBCIDR"}},
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "MGMTSubnetCIDR"}}
         ]
      }
    },

    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [ {
          "PolicyName": "root",
          "PolicyDocument": { "Statement": [ {
            "Effect":"Allow",
            "Action":"cloudformation:DescribeStackResource",
            "Resource":"*"
          } ] }
        } ]
      }
    },

    "AccessKey" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref" : "CfnUser" }
      }
    },

    "BookshelfBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument": {
          "Version"      : "2008-10-17",
          "Id"           : "BookshelfWritePolicy",
          "Statement"    : [
            {
              "Action"     : ["s3:PutObject", "s3:GetObject", "s3:DeleteObject"],
              "Effect"     : "Allow",
              "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "BookshelfBucketName"} , "/*"]]},
              "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
            },
            {
              "Action"     : ["s3:ListBucket"],
              "Effect"     : "Allow",
              "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "BookshelfBucketName"}]]},
              "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
            }
          ]
        },
        "Bucket" : {"Ref" : "BookshelfBucketName"}
      }
    },

    "ChefServerInstance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn" : [ "VPNGatewayInstance", "VPNClientsRouteApp", "VPNWaitCondition" ],
      "Metadata" : {
        "AWS::CloudFormation::Authentication": {
            "S3AccessCreds" : {
                "type": "s3",
                "buckets": [ { "Ref": "SecretsBucketName" } ],
                "roleName": { "Ref": "IAMChefRole" }
            }
        },
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "awscli"          : [],
                "unzip"           : [],
                "libwww-perl"     : [],
                "libswitch-perl"  : [],
                "libdatetime-perl": [],
                "git"             : [],
                "ntp"             : [],
                "chef"            : []
              }
            },
            "files" : {
              "/home/ubuntu/chef-server-core_12.6.0-1_amd64.deb" : {
                "source" : "https://web-dl.packagecloud.io/chef/stable/packages/ubuntu/trusty/chef-server-core_12.6.0-1_amd64.deb",
                "mode"   : "000664",
                "owner"  : "ubuntu",
                "group"  : "ubuntu"
              },
              "/etc/opscode/chef-server.rb" : {
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root",
                "content" : { "Fn::Join" : ["", [
                  "bookshelf['enable'] = false", "\n",
                  "bookshelf['external_url'] = 'https://s3-eu-west-1.amazonaws.com'", "\n",
                  "bookshelf['vip'] = 's3-us-west-2.amazonaws.com'\n",
                  "bookshelf['access_key_id'] = '", { "Ref" : "AccessKey" }, "'\n",
                  "bookshelf['secret_access_key'] = '", { "Fn::GetAtt": ["AccessKey", "SecretAccessKey"]} , "'\n",
                  "opscode_erchef['s3_bucket'] = '", { "Ref" : "BookshelfBucketName" }, "'\n"
                ]]}
              },
              "/root/.chef/knife.rb" : {
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root",
                "content" : { "Fn::Join" : ["", [
                  "node_name                'admin'", "\n",
                  "client_key               '/etc/chef/client.pem'", "\n",
                  "chef_server_url          'https://chef.wdsdev.net/organizations/wdsdemo'", "\n",
                  "cookbook_path            '/root/wdsdemo/cookbooks'", "\n"
               ]]}
              }
            },
            "sources" : {
              "/usr/local/etc" : "http://ec2-downloads.s3.amazonaws.com/cloudwatch-samples/CloudWatchMonitoringScripts-v1.1.0.zip"
            }
          }
        }
      },
      "Properties": {
        "ImageId" : "ami-5189a661",
        "InstanceType" : { "Ref" : "ChefInstanceType" },
        "Monitoring" : "false",
        "KeyName" : { "Ref" : "KeyNameMGMT" },
        "IamInstanceProfile" : { "Ref" : "IAMChefInstanceProfile" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-chef-server" ] ] } }
                 ],
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "ChefServerInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "MGMTSubnet" }
        }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -xe\n",

            "function error_exit\n",
            "{\n",
            "  cfn-signal -e 1 -r \"$1\" '", {"Ref" : "ChefWaitHandle"}, "'\n",
            "  exit 1\n",
            "}\n",

            "echo 'chef.wdsdev.net' > /etc/hostname\n",
            "hostname chef.wdsdev.net\n",
            "apt-get update\n",
            "apt-get -y install python-setuptools python-pip python-dev libffi-dev libssl-dev\n",
            "pip install requests[security]\n",
            "pip install --upgrade ndg-httpsclient\n",
            "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
            "cfn-init --region ", { "Ref" : "AWS::Region" },
            "    -v -s ", { "Ref" : "AWS::StackId" }, " -r ChefServerInstance ",
            "         --access-key ", { "Ref" : "AccessKey" },
            "         --secret-key ", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
            "         --region     ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

            "# make the monitoring script executable - and create crontab \n",
            "chmod +x /usr/local/etc/aws-scripts-mon/*.pl\n",
            "crontab -u root /home/crontab\n",
            "rm /home/crontab\n",

            "# Bootstrap chef\n",
            "dpkg -i /home/ubuntu/chef-server-core_12.6.0-1_amd64.deb >> /tmp/chef_install.log 2>&1 || error_exit 'Failed to install chef server'\n",
            "sleep 5\n",
            "sudo /usr/bin/chef-server-ctl reconfigure > /tmp/chef_configure.log 2>&1 || error_exit 'Failed to configure chef server'\n",
            "sleep 5\n",
            "sudo chef-server-ctl start\n",
            "sleep 10\n",
            "admin_pass=`openssl rand -base64 32`\n",
            "echo $admin_pass > /tmp/chef_admin_pass.txt\n",
            "chef-server-ctl user-create admin admin admin artur.laguza@wds.co $admin_pass --filename /tmp/chef_admin.pem\n",
            "chef-server-ctl org-create wds \"wds\" --association_user admin --filename /tmp/organization.pem\n",
            "aws s3api put-object --bucket mhealth-mgmt-secrets/chef --key chef-admin.pem --body /tmp/chef_admin.pem\n",
            "aws s3api put-object --bucket mhealth-mgmt-secrets/chef --key chef-organization.pem --body /tmp/organization.pem\n",
            "aws s3api put-object --bucket mhealth-mgmt-secrets/chef --key chef-admin-pass.txt --body /tmp/chef_admin_pass.txt\n",
            "curl -k -s -o /dev/null https://localhost:443 || error_exit 'Failed to start chef server'\n",
            "#chef server bootstrap\n",
            "echo -e \"Host github.com\n\tStrictHostKeyChecking no\n\" >> ~/.ssh/config\n",
            "sleep 5\n",
            "cp /tmp/chef_admin.pem /etc/chef/client.pem\n",
            "cd /root\n",
            "git clone https://github.com/alaguza/wdsdemo.git || error_exit\n",
            "cd wdsdemo && git checkout develop || error_exit\n",
            "git pull\n",
            "cd cookbooks || error_exit\n",
            "for cookbook in `echo */ | tr -d \"/\"`; do var=$var\" \"$cookbook; done\n",
            "knife cookbook upload $var\n",
            "cd ../\n",
            "for environment in `ls environments/*.json`; do knife environment from file $environment; done\n",
            "for role in `ls roles/*.json`; do knife role from file $role; done\n",
            "\n",
            "# tag volume\n",
            "Region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep -oP \"(?<=\\\"region\\\" : \\\")[^\\\"]+\")\n",
            "aws ec2 create-tags --resources $(aws ec2 describe-instances --instance-ids $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --region $Region | grep -oP \"(?<=\\\"VolumeId\\\": \\\")[^\\\"]+\") --tags Key=Environment,Value=",{"Ref" : "AWS::StackName"}," --region $Region\n",
            "# If all went well, signal success\n",
            "cfn-signal -e 0 -r \"chef setup complete\" '", {"Ref" : "ChefWaitHandle"}, "'\n"
        ]]}}
      }
    },

    "ChefWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },

    "ChefWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ChefServerInstance",
      "Properties" : {
        "Handle" : {"Ref" : "ChefWaitHandle"},
        "Timeout" : "900"
      }
    },

    "ChefServerInstanceDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : {
          "Fn::Join" : [ "", [
            { "Ref" : "DNSZoneName" }, "."
          ] ]
        },
        "Comment" : "DNS name for Chef server instance.",
        "Name" : {
         "Fn::Join" : [ "", [
          "chef.",
          {"Ref" : "DNSZoneName"}, "."
         ] ]
        },
        "Type" : "A",
        "TTL" : "60",
        "ResourceRecords" : [
          { "Fn::GetAtt" : [ "ChefServerInstance", "PrivateIp" ] }
        ]
      }
    }

  },

  "Outputs" : {
    "VPNIP" : {
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : ["VPNGatewayInstance", "PublicIp"] }]]},
      "Description" : "Newly created vpn gateway public IP"
    }
  }
}
