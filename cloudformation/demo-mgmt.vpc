{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "This template creates management VPC for mHealth project.",

  "Parameters" : {

    "VPNInstanceType" : {
      "Description" : "VPN Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "ChefInstanceType" : {
      "Description" : "Chef Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyNameMGMT": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the Chef and VPN instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "VPCCIDR" : {
      "Description" : "CIDR block for VPC",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.0.0/20",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DMZSubnetCIDR" : {
      "Description" : "CIDR block for DMZ subnet",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.1.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "AppSubnetACIDR" : {
      "Description" : "CIDR block for App Servers subnet in AZ A",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.2.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "AppSubnetBCIDR" : {
      "Description" : "CIDR block for App Servers subnet in AZ B",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.3.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DBSubnetACIDR" : {
      "Description" : "CIDR block for DB Servers subnet in AZ A",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.4.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DBSubnetBCIDR" : {
      "Description" : "CIDR block for DB Servers subnet in AZ B",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.5.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "MGMTSubnetCIDR" : {
      "Description" : "CIDR block for Management Servers subnet",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.225.6.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DMZSubnetNetwork" : {
      "Description" : "Network and netmask for DMZ subnet",
      "Type": "String",
      "Default": "10.225.1.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP network/mask of the form x.x.x.x x.x.x.x."
    },

    "AppSubnetBNetwork" : {
      "Description" : "Network and netmask for App subnet",
      "Type": "String",
      "Default": "10.225.2.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP network/mask of the form x.x.x.x x.x.x.x."
    },

    "AppSubnetBNetwork" : {
      "Description" : "Network and netmask for App subnet",
      "Type": "String",
      "Default": "10.225.2.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP network/mask of the form x.x.x.x x.x.x.x."
    },

    "VPNSubnetCIDR" : {
      "Description" : "CIDR block for App Servers subnet",
      "Type": "String",
      "Default": "10.226.0.0/24",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x x.x.x.x."
    },

    "VPNSubnetNetwork" : {
      "Description" : "CIDR block for App Servers subnet",
      "Type": "String",
      "Default": "10.226.0.0 255.255.255.0",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x x.x.x.x."
    },

    "NameTag" : {
      "Default" : "wds-demo",
      "Type" : "String",
      "Description" : "Name tag for resources"
    },

    "SecretsBucketName" : {
      "Default" : "wds-demo-secrets",
      "Type" : "String",
      "Description" : "S3 bucket with secrets used in this template"
    },

    "InstallationsBucketName" : {
      "Default" : "wds-demo-install",
      "Type" : "String",
      "Description" : "S3 bucket with windows installation files used in this template"
    },

    "BookshelfBucketName" : {
      "Default" : "wds-demo-bookshelf",
      "Type" : "String",
      "Description" : "S3 bucket with bookshelf for chef server used in this template"
    },

    "SecretsVPNFolder" : {
      "Default" : "vpngw",
      "Type" : "String",
      "Description" : "Folder name containing VPN GW secrets. Policy granting read permission will be created and assigned to VPN GW EC2 instance"
    },

    "SecretsChefFolder" : {
      "Default" : "chef",
      "Type" : "String",
      "Description" : "Folder name containing Chef server secrets. Policy granting read permission will be created and assigned to Chef server EC2 instance"
    },

    "DNSZoneName" : {
      "Default" : "wdsdev.net",
      "Type" : "String",
      "Description" : "DNS Zone name to create hostnames in"
    },

    "AZa" : {
      "Type" : "String", 
      "Default" : "eu-west-1a",
      "Description" : "Availability zone to create availability zone A subnets"
    },

    "AZb" : {
      "Type" : "String", 
      "Default" : "eu-west-1b",
      "Description" : "Availability zone to create availability zone B subnet"
    }

  },

  "Resources" : {

    "RolePoliciesTags": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "_tags_policy" ] ] },
        "PolicyDocument": {
           "Version" : "2012-10-17",
           "Statement": [ {
              "Effect": "Allow",
              "Action": [
                     "ec2:Describe*",
                     "ec2:CreateTags"
                 ],
              "Resource": "*"
           }]
        },
        "Roles": [ {"Ref": "IAMVPNRole"}, {"Ref": "IAMChefRole"} ]
      }
    },

    "IAMVPNRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
           "Version" : "2012-10-17",
           "Statement": [ {
              "Effect": "Allow",
              "Principal": {
                 "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
           } ]
        },
        "Policies": [ {
           "PolicyName": { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "vpn-secrets-s3" ] ] },
           "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement":[{
                "Effect": "Allow",
                "Action": [
                       "s3:Get*",
                       "s3:List*",
                       "s3:Put*"
                     ],
                "Resource": [
                              { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "SecretsBucketName" }, "/", { "Ref" : "SecretsVPNFolder" } , "/" ] ] },
                              { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "SecretsBucketName" }, "/", { "Ref" : "SecretsVPNFolder" } , "/*" ] ] }
                  ]
               }
             ]
           }
         }]
       }
    },

    "IAMVPNInstanceProfile" : {
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": { "Fn::Join" : [ "", [ "/", { "Ref" : "NameTag" }, "/InstanceProfile/" ] ] },
          "Roles": [ { "Ref" : "IAMVPNRole" } ]
       }
    },

    "IAMChefRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
           "Version" : "2012-10-17",
           "Statement": [ {
              "Effect": "Allow",
              "Principal": {
                 "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
           } ]
        },
        "Policies": [ {
           "PolicyName": { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "chef-secrets-s3" ] ] },
           "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement":[{
                "Effect": "Allow",
                "Action": [
                       "s3:Get*",
                       "s3:List*",
                       "s3:PutObject"
                     ],
                "Resource": [
                              { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "SecretsBucketName" }, "/", { "Ref" : "SecretsChefFolder" } , "/" ] ] },
                              { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "SecretsBucketName" }, "/", { "Ref" : "SecretsChefFolder" } , "/*" ] ] }
                  ]
               }
             ]
           }
         }]
       }
    },

    "IAMChefInstanceProfile" : {
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": { "Fn::Join" : [ "", [ "/", { "Ref" : "NameTag" }, "/InstanceProfile/" ] ] },
          "Roles": [ { "Ref" : "IAMChefRole" } ]
       }
    },

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "VPCCIDR" },
        "Tags" : [  {"Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-vpc" ] ] } }
                 ]
      }
    },

    "VPCDhcpOptions" : {
      "Type" : "AWS::EC2::DHCPOptions",
      "Properties" : {
        "DomainName" : { "Ref" : "DNSZoneName" },
        "DomainNameServers" : [ "AmazonProvidedDNS" ],
        "Tags" : [  {"Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-dhcp-opts" ] ] } }
                 ]
      }
    },

    "VPCDhcpOptionsAssociation" : { 
      "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties" : {
        "DhcpOptionsId" : { "Ref" : "VPCDhcpOptions" },
        "VpcId" : { "Ref" : "VPC" }
      }
    },

    "DMZSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "DMZSubnetCIDR" },
        "AvailabilityZone" : { "Ref" : "AZa" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-DMZ" ] ] } }
                 ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-inetgw" ] ] } }
                 ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTableDMZ" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-routetable-dmz" ] ] } }
                 ]
      }
    },

    "DefaultRouteDMZ" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableDMZ" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "DMZSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DMZSubnet" },
        "RouteTableId" : { "Ref" : "RouteTableDMZ" }
      }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} } ]
      }
    },

    "InboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "InboundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },

    "InboundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "104",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "OutBoundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },

    "OutBoundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },

    "OutBoundVPNNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1194", "To" : "1194"}
      }
    },

    "OutBoundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "104",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DMZSubnet" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "AppSubnetA" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "AppSubnetACIDR" },
        "AvailabilityZone" : { "Ref" : "AZa" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-APP" ] ] } }
                 ]
      }
    },

    "AppSubnetB" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "AppSubnetBCIDR" },
        "AvailabilityZone" : { "Ref" : "AZb" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-APP" ] ] } }
                 ]
      }
    },

    "DBSubnetA" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "DBSubnetACIDR" },
        "AvailabilityZone" : { "Ref" : "AZa" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-DB" ] ] } }
                 ]
      }
    },

    "DBSubnetB" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "DBSubnetBCIDR" },
        "AvailabilityZone" : { "Ref" : "AZb" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-DB" ] ] } }
                 ]
      }
    },

    "MGMTSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "MGMTSubnetCIDR" },
        "AvailabilityZone" : { "Ref" : "AZa" },
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-subnet-MGMT" ] ] } }
                 ]
      }
    },

    "RouteTableApp" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [  { "Key" : "Environment", "Value" : { "Ref" : "AWS::StackName"} },
                    { "Key": "Name", "Value" : { "Fn::Join" : [ "", [ { "Ref" : "NameTag" }, "-routetable-app" ] ] } }
                 ]
      }
    },

    "DefaultRouteApp" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "InternetGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableApp" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "AppSubnetARouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "AppSubnetA" },
        "RouteTableId" : { "Ref" : "RouteTableApp" }
      }
    },

    "AppSubnetBRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "AppSubnetB" },
        "RouteTableId" : { "Ref" : "RouteTableApp" }
      }
    },

    "VPNInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22 and VPN via 1194",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation" }},
          { "IpProtocol" : "tcp", "FromPort" : "1194", "ToPort" : "1194", "CidrIp" : { "Ref" : "SSHLocation" }},
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "AppSubnetACIDR" }},
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "AppSubnetACIDR" }},
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "AppSubnetBCIDR" }},
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "AppSubnetBCIDR" }}
         ]
      }
    }

 },

  "Outputs" : {
  }
}
